package de.bauersoft.mobile.security;

import io.jsonwebtoken.*;
import io.jsonwebtoken.security.SignatureException;
import io.jsonwebtoken.security.Keys;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import java.nio.charset.StandardCharsets;
import java.security.Key;
import java.util.Date;

/**
 * Utility-Klasse zur Verwaltung von JWT-Token.
 * <p>
 * Diese Klasse enth√§lt Methoden zum Generieren, Validieren und Extrahieren von Informationen
 * aus JSON Web Tokens (JWT).
 * </p>
 */
@Component
public class JwtTokenProvider {

    private static final Logger logger = LoggerFactory.getLogger(JwtTokenProvider.class);

    @Value("${jwt.secret}")
    private String jwtSecret;

    @Value("${jwt.expiration}")
    private long jwtExpirationMs;

    /**
     * Erstellt den geheimen Schl√ºssel f√ºr die JWT-Signatur.
     *
     * @return Der generierte `Key` f√ºr die JWT-Signierung.
     */
    private Key getSigningKey() {
        logger.debug("üîë Generiere JWT-Signatur-Schl√ºssel...");
        return Keys.hmacShaKeyFor(jwtSecret.getBytes(StandardCharsets.UTF_8));
    }

    /**
     * Erstellt ein neues JWT-Token f√ºr den angegebenen Benutzer.
     *
     * @param userDetails Die Benutzerinformationen f√ºr das Token.
     * @return Ein signiertes JWT-Token als `String`.
     */
    public String generateToken(UserDetails userDetails) {
        logger.info("üõ†Ô∏è Generiere JWT-Token f√ºr Benutzer: {}", userDetails.getUsername());

        String token = Jwts.builder()
                .setSubject(userDetails.getUsername()) // Benutzername als Subject
                .setIssuedAt(new Date()) // Erstellungszeitpunkt
                .setExpiration(new Date(System.currentTimeMillis() + jwtExpirationMs)) // Ablaufzeit
                .signWith(getSigningKey(), SignatureAlgorithm.HS256) // Signatur mit HMAC SHA-256
                .compact();

        logger.debug("‚úÖ JWT-Token erfolgreich generiert: {}", token);
        return token;
    }

    /**
     * √úberpr√ºft, ob das √ºbergebene JWT-Token g√ºltig ist.
     *
     * @param token Das zu √ºberpr√ºfende JWT-Token.
     * @return `true`, wenn das Token g√ºltig ist, sonst `false`.
     */
    public boolean validateToken(String token) {
        try {
            logger.info("üîç Validierung des JWT-Tokens...");
            Jwts.parserBuilder().setSigningKey(getSigningKey()).build().parseClaimsJws(token);
            logger.info("‚úÖ JWT-Token ist g√ºltig.");
            return true;
        } catch (ExpiredJwtException e) {
            logger.warn("‚ö†Ô∏è JWT-Token ist abgelaufen: {}", e.getMessage());
        } catch (UnsupportedJwtException e) {
            logger.warn("‚ö†Ô∏è Nicht unterst√ºtztes JWT-Token: {}", e.getMessage());
        } catch (MalformedJwtException e) {
            logger.warn("‚ö†Ô∏è Ung√ºltiges JWT-Token: {}", e.getMessage());
        } catch (SignatureException e) {
            logger.warn("‚ö†Ô∏è Ung√ºltige JWT-Signatur: {}", e.getMessage());
        } catch (IllegalArgumentException e) {
            logger.warn("‚ö†Ô∏è Leeres oder ung√ºltiges JWT-Token: {}", e.getMessage());
        }
        return false;
    }

    /**
     * Extrahiert den Benutzernamen aus dem √ºbergebenen JWT-Token.
     *
     * @param token Das JWT-Token.
     * @return Der Benutzername (`subject`) aus dem Token.
     */
    public String getUsernameFromToken(String token) {
        logger.info("üìú Extrahiere Benutzername aus JWT-Token...");
        String username = Jwts.parserBuilder()
                .setSigningKey(getSigningKey())
                .build()
                .parseClaimsJws(token)
                .getBody()
                .getSubject();
        logger.info("‚úÖ Benutzername aus Token: {}", username);
        return username;
    }
}
